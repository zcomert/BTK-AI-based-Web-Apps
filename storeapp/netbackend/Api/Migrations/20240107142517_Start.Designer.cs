// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240107142517_Start")]
    partial class Start
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0");

            modelBuilder.Entity("Entities.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AtCreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CommentId");

                    b.HasIndex("ProductId");

                    b.ToTable("Comments", (string)null);

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            AtCreatedDate = new DateTime(2024, 1, 7, 17, 25, 17, 318, DateTimeKind.Local).AddTicks(1324),
                            ProductId = 1,
                            Text = "Harika bir ürün."
                        },
                        new
                        {
                            CommentId = 2,
                            AtCreatedDate = new DateTime(2024, 1, 7, 17, 25, 17, 318, DateTimeKind.Local).AddTicks(1336),
                            ProductId = 1,
                            Text = "Harika bir ürün, kesinlikle tavsiye ediyorum."
                        },
                        new
                        {
                            CommentId = 3,
                            AtCreatedDate = new DateTime(2024, 1, 7, 17, 25, 17, 318, DateTimeKind.Local).AddTicks(1337),
                            ProductId = 1,
                            Text = "Kargo biraz gecikti ama beklediğime değdi. Teşekkürler"
                        });
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AtCreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageURL")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("/images/default.jpg");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AtCreatedDate = new DateTime(2024, 1, 7, 17, 25, 17, 318, DateTimeKind.Local).AddTicks(2187),
                            ImageURL = "/images/1.jpg",
                            Name = "Laptop",
                            Price = 1500m
                        },
                        new
                        {
                            Id = 2,
                            AtCreatedDate = new DateTime(2024, 1, 7, 17, 25, 17, 318, DateTimeKind.Local).AddTicks(2192),
                            ImageURL = "/images/2.jpg",
                            Name = "Smartphone",
                            Price = 800m
                        },
                        new
                        {
                            Id = 3,
                            AtCreatedDate = new DateTime(2024, 1, 7, 17, 25, 17, 318, DateTimeKind.Local).AddTicks(2194),
                            ImageURL = "/images/3.jpg",
                            Name = "Headphones",
                            Price = 100m
                        },
                        new
                        {
                            Id = 4,
                            AtCreatedDate = new DateTime(2024, 1, 7, 17, 25, 17, 318, DateTimeKind.Local).AddTicks(2195),
                            ImageURL = "/images/4.jpg",
                            Name = "Tablet",
                            Price = 600m
                        },
                        new
                        {
                            Id = 5,
                            AtCreatedDate = new DateTime(2024, 1, 7, 17, 25, 17, 318, DateTimeKind.Local).AddTicks(2195),
                            ImageURL = "/images/5.jpg",
                            Name = "Smartwatch",
                            Price = 300m
                        });
                });

            modelBuilder.Entity("Entities.Models.Comment", b =>
                {
                    b.HasOne("Entities.Models.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
